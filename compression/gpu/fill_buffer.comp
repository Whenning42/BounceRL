#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1) in;

layout (std430, binding = 0) buffer img { uint image[]; };
layout (std430, binding = 1) buffer enc { uint encoded[]; };
// layout (std430, binding = 2) buffer mp { uint map[]; };
// Add map buffer.
// Add map lookup function.
// Add branchless coalesced byte writer.
// Writes do the following:
// - Set flag bits
// - Scroll buffer

void main() {
  uint id = gl_GlobalInvocationID.x + 32 * gl_GlobalInvocationID.y;
  if (id != 0) return;
//  encoded[id] = image[id];

  const uint in_block_size = W;
  const uint out_block_size = (W * 5 / 4) + W / 16 + 2;

  uint in_pos = id * in_block_size;
  uint out_pos = id * out_block_size;

  uint in_end = (id + 1) * in_block_size;

  uint last = 0;
  uint rl = 0;
  for (; in_pos < in_end; in_pos++) {
    uint v = image[in_pos];
    if (v != last) {
      // WriteValues(rl, FindColor(v));
      // rl = 0;
      // last = v;
      encoded[out_pos] = rl;
      encoded[out_pos + 1] = FindOr(v);
      rl = 0;
      last = v;
      out_pos += 2;
    }
    rl++;
  }
}
