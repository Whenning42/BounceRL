### Serial Number difficulty ###

All client requests are numbered sequentially by the client. Server replies then inclue this
serial number to indicate what request they are a reply to. Events from the server also include
serial numbers including which request has last been processed by the server. The server
processes all requests in order. Only some of the client requests generate server replies.

We then need to ask, what is the correct serial number for an injected event?

A lower bound, is the highest serial number we've seen in an event or reply. An upper bound
is the largest request that's been unanswered. If we send a serial number that's too low,
we risk breaking a client by in effect "NACKing" the requests it's sending for which there
is no reply. If we send a serial number that's too high, we risk a later server event being
sent with a lower serial number, and thus having event serial numbers no longer monotonically
increase. All of this is further complicated by serial numbers being 16 bits and rolling around,
making it harder to tell if a serial number is larger or smaller than another.

Note: A possible solution would be to send injected events at the aforementioned upper bound
serial number, and then raise the serial number of any later real events to be at least this
large

